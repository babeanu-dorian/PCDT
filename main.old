#include <iostream>
#include <vector>
#include <chrono>

#include <helib/helib.h>
#include <pcdt/he_int.h>

/*
void tryValues() {
  std::vector<int> primes = {307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809};
  for (auto it = primes.cbegin(); it != primes.cend(); ++it) {
    // Plaintext prime modulus
    unsigned long p = 2;//4999;
    // Cyclotomic polynomial - defines phi(m)
    unsigned long m = 85 * (*it);//32317
    // Hensel lifting (default = 1)
    unsigned long r = 1;
    // Number of bits of the modulus chain
    unsigned long bits = 600;
    // Number of columns of Key-Switching matrix (default = 2 or 3)
    unsigned long c = 2;

    std::cout << "Initialising context object..." << std::endl;
    // Initialize context
    helib::Context context(m, p, r);
    // Modify the context, adding primes to the modulus chain
    std::cout << "Building modulus chain..." << std::endl;
    buildModChain(context, bits, c);

    // Print the context
    context.zMStar.printout();
    std::cout << std::endl;

    // Print the security level
    std::cout << "Security: " << context.securityLevel() << std::endl;
    std::cout << "Number of slots: " << context.ea->size() << std::endl << std::endl << std::endl;
  }
}

void testHeInt(helib::Context const &context) {
  helib::Ptxt<helib::BGV> ptxt(context);
  for (int i = -100; i != 101; ++i) {
    pcdt::HeInt::intToPtxt(i, 8, ptxt);
    int res = pcdt::HeInt::ptxtToInt(ptxt, 8);
    std::cout << "Result: " << res << std::endl
              << "Test " << i << ": " << (i == res) << std::endl << std::endl;
  }
}

*/

int main(int argc, char* argv[])
{

  // Plaintext prime modulus
  unsigned long p = 2;
  // Cyclotomic polynomial - defines phi(m)
  unsigned long m = 65281;//32317
  // Generators
  std::vector<long> gens = {43073, 22214};//{3};
  // Ords
  std::vector<long> ords = {96, -14};//{8};
  // MVec
  NTL::Vec<long> mVec;
  mVec.append(97); //17
  mVec.append(673); //1901
  // Hensel lifting (default = 1)
  unsigned long r = 1;
  // Number of bits of the modulus chain
  unsigned long bits = 1800;
  // Number of columns of Key-Switching matrix (default = 2 or 3)
  unsigned long c = 3;
  //long cM = 100;

  std::cout << "Initialising context object..." << std::endl;
  // Initialize context
  helib::Context context(m, p, r, gens, ords);
  //context.zMStar.set_cM(cM / 100.0);

  // Modify the context, adding primes to the modulus chain
  std::cout << "Building modulus chain..." << std::endl;
  buildModChain(context, bits, c, true, 0);

  // Make Bootstrappable
  //std::cout << "Make bootstrappable..." << std::endl;
  //context.makeBootstrappable(mVec, 0, false, false);

  // Print the context
  context.zMStar.printout();
  std::cout << std::endl;

  // Print the security level
  std::cout << "Security: " << context.securityLevel() << std::endl;

  // Secret key management
  //std::cout << "Creating secret key..." << std::endl;
  // Create a secret key associated with the context
  //helib::SecKey secret_key(context);
  // Generate the secret key
  //secret_key.GenSecKey();
  //std::cout << "Generating key-switching matrices..." << std::endl;
  // Compute key-switching matrices that we need
  //helib::addSome1DMatrices(secret_key);
  //helib::addFrbMatrices(secret_key);

  // Generate bootstrapping data
  //std::cout << "Generating recrypt data..." << std::endl;
  //secret_key.genRecryptData();

  // Public key management
  // Set the secret key (upcast: SecKey is a subclass of PubKey)
  //const helib::PubKey& public_key = secret_key;

  // Get the EncryptedArray of the context
  //const helib::EncryptedArray& ea = *(context.ea);

  // Get the number of slot (phi(m))
  //long nslots = ea.size();
  //std::cout << "Number of slots: " << nslots << std::endl;
  
  //pcdt::HeInt x(4, secret_key);
  //pcdt::HeInt y(2, secret_key);
  //auto start = std::chrono::steady_clock::now();
  //x += y;
  //std::cout << "Time(ms): "
  //          << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start).count()
  //          << std::endl;
  //std::cout << "Result: " << x.decrypt(secret_key) << std::endl << std::endl;
  //testHeInt(context);

  // Create a vector of long with nslots elements
  //helib::Ptxt<helib::BGV> ptxt(context);
  // Set it with numbers 0..nslots - 1
  //for (int i = 0; i < ptxt.size(); ++i) {
  //  ptxt[i] = i;
  //}
  //ptxt[0] = 1;
  //ptxt[1] = 1;

  // Print the plaintext
  //std::cout << "Initial Plaintext: " << ptxt << std::endl;

  // Create a ciphertext
  //helib::Ctxt ctxt(public_key);
  // Encrypt the plaintext using the public_key
  //public_key.Encrypt(ctxt, ptxt);

  // Rotate ciphertext
  //ea.rotate1D(ctxt, ea.dimension() - 1, -1);

  // Square the ciphertext
  //ctxt.multiplyBy(ctxt);
  // Plaintext version
  //ptxt.multiplyBy(ptxt);

  // Create a plaintext for decryption
  //helib::Ptxt<helib::BGV> plaintext_result(context);
  // Decrypt the modified ciphertext
  //secret_key.Decrypt(plaintext_result, ctxt);

  // Print the decrypted plaintext
  //std::cout << "Decrypted Plaintext: " << plaintext_result << std::endl;
  // Print the plaintext version result, should be the same as the ctxt version
  //std::cout << "Plaintext version: " << ptxt << std::endl;

  // We can also add constants
  //ctxt.addConstant(NTL::ZZX(1l));
  // Plaintext version
  //ptxt.addConstant(NTL::ZZX(1l));

  // And multiply by constants
  //ctxt *= NTL::ZZX(1l);
  // Plaintext version
  //ptxt *= NTL::ZZX(1l);

  // We can also perform ciphertext-plaintext operations
  //ctxt += ptxt;

  // Decrypt the modified ciphertext into a new plaintext
  //helib::Ptxt<helib::BGV> new_plaintext_result(context);
  //secret_key.Decrypt(new_plaintext_result, ctxt);

  // Print the decrypted plaintext
  //std::cout << "Decrypted Plaintext: " << new_plaintext_result << std::endl;
}